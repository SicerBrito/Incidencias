// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(IncidenciaContext))]
    [Migration("20230721214410_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Area");

                    b.Property<int>("Entrenamiento")
                        .HasColumnType("int")
                        .HasColumnName("AreaEntrenamiento");

                    b.Property<int>("IdLugar")
                        .HasColumnType("int")
                        .HasColumnName("Lugar_Id");

                    b.Property<int>("Review")
                        .HasColumnType("int")
                        .HasColumnName("AreaReview");

                    b.HasKey("Id");

                    b.HasIndex("IdLugar");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Cargo", b =>
                {
                    b.Property<int>("IdCargo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdRols");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("DescripcionDelRol");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreDelRol");

                    b.HasKey("IdCargo");

                    b.ToTable("Rols", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Concurrencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Concurrencia");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("CantidadDeConcurrencias");

                    b.HasKey("Id");

                    b.ToTable("Concurrencias", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Emails");

                    b.Property<string>("Emails")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("Emails");

                    b.HasKey("Id");

                    b.ToTable("Emails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Genero");

                    b.Property<int>("Hombre")
                        .HasColumnType("int")
                        .HasColumnName("Masculino");

                    b.Property<int>("IdPersonalizado")
                        .HasColumnType("int")
                        .HasColumnName("Personalizacion_Id");

                    b.Property<int>("Mujer")
                        .HasColumnType("int")
                        .HasColumnName("Femenino");

                    b.Property<int>("Privado")
                        .HasColumnType("int")
                        .HasColumnName("Privado");

                    b.HasKey("Id");

                    b.HasIndex("IdPersonalizado");

                    b.ToTable("Generos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Incidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Incidencia");

                    b.Property<DateTime>("FechaIncidente")
                        .HasColumnType("date")
                        .HasColumnName("Created_at");

                    b.Property<int>("IdPersonaIncidente")
                        .HasColumnType("int")
                        .HasColumnName("PersonaIncidente_Id");

                    b.Property<int>("IdTipoIncidencia")
                        .HasColumnType("int")
                        .HasColumnName("TipoIncidencia_Id");

                    b.Property<int>("IdUbicacion")
                        .HasColumnType("int")
                        .HasColumnName("Ubicacion_Id");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Usuario_Id");

                    b.HasKey("Id");

                    b.HasIndex("IdPersonaIncidente");

                    b.HasIndex("IdTipoIncidencia");

                    b.HasIndex("IdUbicacion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Incidencias", (string)null);
                });

            modelBuilder.Entity("Core.Entities.InfoDocumento", b =>
                {
                    b.Property<int>("IdInformacionPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InformacionPersonal_Id");

                    b.Property<int?>("DocumentosId")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumento")
                        .HasColumnType("int")
                        .HasColumnName("Documento_Id");

                    b.HasKey("IdInformacionPersonal");

                    b.HasIndex("DocumentosId");

                    b.HasIndex("IdDocumento");

                    b.ToTable("InformacionDeDocumentos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.InformacionPersonal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Info");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("Apellidos");

                    b.Property<int>("Documento")
                        .HasColumnType("int")
                        .HasColumnName("Documento");

                    b.Property<int>("IdGenero")
                        .HasColumnType("int")
                        .HasColumnName("Genero_ID");

                    b.Property<int>("IdTelefono")
                        .HasColumnType("int")
                        .HasColumnName("Telefono_ID");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombres");

                    b.HasKey("Id");

                    b.HasIndex("IdGenero");

                    b.HasIndex("IdTelefono");

                    b.ToTable("DatosPersonales", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Login");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("date")
                        .HasColumnName("Created_at");

                    b.Property<int>("IdCargo")
                        .HasColumnType("int")
                        .HasColumnName("Cargo_Id");

                    b.Property<int>("IdEmail")
                        .HasColumnType("int")
                        .HasColumnName("Email_Id");

                    b.Property<int>("IdInfo")
                        .HasColumnType("int")
                        .HasColumnName("Info_Id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.HasIndex("IdCargo");

                    b.HasIndex("IdEmail");

                    b.HasIndex("IdInfo");

                    b.ToTable("Logins", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Lugar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdLugar");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("DescripcionLugar");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreLugar");

                    b.HasKey("Id");

                    b.ToTable("Lugares", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PersonaIncidente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Incidencia");

                    b.Property<int>("IdConcurrencia")
                        .HasColumnType("int")
                        .HasColumnName("Concurrencia_Id");

                    b.Property<int>("IdInfo")
                        .HasColumnType("int")
                        .HasColumnName("Info_Id");

                    b.HasKey("Id");

                    b.HasIndex("IdConcurrencia");

                    b.HasIndex("IdInfo");

                    b.ToTable("PersonasIncidentes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Personalizado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Personalizacion");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Personalizacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Telefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Telefono");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("Numero");

                    b.HasKey("Id");

                    b.ToTable("Telefonos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_TipoDocumento");

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Abreviatura");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.Property<int?>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("TiposDeDocumentos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoIncidente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_TipoDeIncidente");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TiposDeIncidente", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Ubicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdUbicacion");

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasColumnName("Area_Id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreUbicacion");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.ToTable("Ubicaciones", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Area", b =>
                {
                    b.HasOne("Core.Entities.Lugar", "Lugares")
                        .WithMany("Areas")
                        .HasForeignKey("IdLugar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lugares");
                });

            modelBuilder.Entity("Core.Entities.Genero", b =>
                {
                    b.HasOne("Core.Entities.Personalizado", "Personalizacion")
                        .WithMany("Generos")
                        .HasForeignKey("IdPersonalizado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personalizacion");
                });

            modelBuilder.Entity("Core.Entities.Incidencia", b =>
                {
                    b.HasOne("Core.Entities.PersonaIncidente", "PersonasIncidentes")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdPersonaIncidente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoIncidente", "TiposDeIncidentes")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdTipoIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Ubicacion", "Ubicaciones")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdUbicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Login", "Logins")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logins");

                    b.Navigation("PersonasIncidentes");

                    b.Navigation("TiposDeIncidentes");

                    b.Navigation("Ubicaciones");
                });

            modelBuilder.Entity("Core.Entities.InfoDocumento", b =>
                {
                    b.HasOne("Core.Entities.TipoDocumento", "Documentos")
                        .WithMany()
                        .HasForeignKey("DocumentosId");

                    b.HasOne("Core.Entities.InformacionPersonal", "DatosPersonales")
                        .WithMany("InfoDeDocumentos")
                        .HasForeignKey("IdDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatosPersonales");

                    b.Navigation("Documentos");
                });

            modelBuilder.Entity("Core.Entities.InformacionPersonal", b =>
                {
                    b.HasOne("Core.Entities.Genero", "Generos")
                        .WithMany("DatosPersonales")
                        .HasForeignKey("IdGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Telefono", "Telefonos")
                        .WithMany("DatosPersonales")
                        .HasForeignKey("IdTelefono")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Generos");

                    b.Navigation("Telefonos");
                });

            modelBuilder.Entity("Core.Entities.Login", b =>
                {
                    b.HasOne("Core.Entities.Cargo", "Cargos")
                        .WithMany("Logins")
                        .HasForeignKey("IdCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Email", "Emails")
                        .WithMany("Logins")
                        .HasForeignKey("IdEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.InformacionPersonal", "DatosPersonales")
                        .WithMany("Logins")
                        .HasForeignKey("IdInfo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargos");

                    b.Navigation("DatosPersonales");

                    b.Navigation("Emails");
                });

            modelBuilder.Entity("Core.Entities.PersonaIncidente", b =>
                {
                    b.HasOne("Core.Entities.Concurrencia", "Concurrencias")
                        .WithMany("PersonasIncidentes")
                        .HasForeignKey("IdConcurrencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.InformacionPersonal", "DatosPersonales")
                        .WithMany("PersonasIncidentes")
                        .HasForeignKey("IdInfo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concurrencias");

                    b.Navigation("DatosPersonales");
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.HasOne("Core.Entities.TipoDocumento", null)
                        .WithMany("TipoDeDocumentos")
                        .HasForeignKey("TipoDocumentoId");
                });

            modelBuilder.Entity("Core.Entities.Ubicacion", b =>
                {
                    b.HasOne("Core.Entities.Area", "Areas")
                        .WithMany("Ubicaciones")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");
                });

            modelBuilder.Entity("Core.Entities.Area", b =>
                {
                    b.Navigation("Ubicaciones");
                });

            modelBuilder.Entity("Core.Entities.Cargo", b =>
                {
                    b.Navigation("Logins");
                });

            modelBuilder.Entity("Core.Entities.Concurrencia", b =>
                {
                    b.Navigation("PersonasIncidentes");
                });

            modelBuilder.Entity("Core.Entities.Email", b =>
                {
                    b.Navigation("Logins");
                });

            modelBuilder.Entity("Core.Entities.Genero", b =>
                {
                    b.Navigation("DatosPersonales");
                });

            modelBuilder.Entity("Core.Entities.InformacionPersonal", b =>
                {
                    b.Navigation("InfoDeDocumentos");

                    b.Navigation("Logins");

                    b.Navigation("PersonasIncidentes");
                });

            modelBuilder.Entity("Core.Entities.Login", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Core.Entities.Lugar", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("Core.Entities.PersonaIncidente", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Core.Entities.Personalizado", b =>
                {
                    b.Navigation("Generos");
                });

            modelBuilder.Entity("Core.Entities.Telefono", b =>
                {
                    b.Navigation("DatosPersonales");
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Navigation("TipoDeDocumentos");
                });

            modelBuilder.Entity("Core.Entities.TipoIncidente", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Core.Entities.Ubicacion", b =>
                {
                    b.Navigation("Incidencias");
                });
#pragma warning restore 612, 618
        }
    }
}
